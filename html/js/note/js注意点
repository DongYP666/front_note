JavaScript 对大小写是敏感的。
JavaScript 会忽略多余的空格。您可以向脚本添加空格，来提高其可读性。
JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。

可以在文本字符串中使用反斜杠对代码行进行换行
document.write("你好 \
世界!");
document.write \
("你好世界!");

数组的声明
1.var cars=new Array();
  cars[0]="Saab";
  cars[1]="Volvo";
  cars[2]="BMW";
2.var cars=new Array("Saab","Volvo","BMW");
3.var cars=["Saab","Volvo","BMW"];

对象的声明
var person={firstname:"John", lastname:"Doe", id:5566};
对象属性的两个寻址方式
name=person.lastname;
name=person["lastname"];

变量的声明周期
局部变量会在函数运行以后被删除。
全局变量会在页面关闭后被删除。
如果您把值赋给尚未声明的变量，该变量将被自动作为全局变量声明。
这条语句：carname="Volvo"; 将声明一个全局变量 carname，即使它在函数内执行。

常见的html事件
onchange	    HTML 元素改变
onclick	        用户点击 HTML 元素
onmouseover	    用户在一个HTML元素上移动鼠标
onmouseout	    用户从一个HTML元素上移开鼠标
onkeydown	    用户按下键盘按键
onload	        浏览器已完成页面的加载

转义字符
\'	单引号
\"	双引号
\\	反斜杠
\n	换行
\r	回车
\t	tab(制表符)
\b	退格符
\f	换页符

字符串对象的方法
charAt()	    返回指定索引位置的字符
charCodeAt()	返回指定索引位置字符的 Unicode 值
concat()	    连接两个或多个字符串，返回连接后的字符串
fromCharCode()	将 Unicode 转换为字符串
indexOf()	    返回字符串中检索指定字符第一次出现的位置
lastIndexOf()	返回字符串中检索指定字符最后一次出现的位置
localeCompare()	用本地特定的顺序来比较两个字符串
match()	        找到一个或多个正则表达式的匹配
replace()	    替换与正则表达式匹配的子串
search()	    检索与正则表达式相匹配的值
slice()	        提取字符串的片断，并在新的字符串中返回被提取的部分
split()	        把字符串分割为子字符串数组
substr()	    从起始索引号提取字符串中指定数目的字符
substring()	    提取字符串中两个指定的索引号之间的字符
toLocaleLowerCase()	根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射
toLocaleUpperCase()	根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射
toLowerCase()	把字符串转换为小写
toString()	    返回字符串对象值
toUpperCase()	把字符串转换为大写
trim()	        移除字符串首尾空白
valueOf()	    返回某个字符串对象的原始值

JavaScript == 与 === 区别
1、对于 string、number 等基础类型，== 和 === 是有区别的
    a）不同类型间比较，== 之比较 "转化成同一类型后的值" 看 "值" 是否相等，=== 如果类型不同，其结果就是不等。
    b）同类型比较，直接进行 "值" 比较，两者结果一样。
2、对于 Array,Object 等高级类型，== 和 === 是没有区别的
    进行 "指针地址" 比较
3、基础类型与高级类型，== 和 === 是有区别的
    a）对于 ==，将高级转化为基础类型，进行 "值" 比较
    b）因为类型不同，=== 结果为 false
4、!= 为 == 的非运算，!== 为 === 的非运算

undefined 和 null 的区别
null 和 undefined 的值相等，但类型不等：
typeof undefined             // undefined
typeof null                  // object
null === undefined           // false
null == undefined            // true

JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。
JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。
JavaScript 只有声明的变量会提升，初始化的不会。

JavaScript 中的所有数据都是以 64 位浮点型数据(float) 来存储。
例:
var x = 0.1;
var y = 0.2;
var z = x + y            // z 的结果为 0.3
if (z == 0.3)            // 返回 false
为解决以上问题，可以用整数的乘除法来解决：
var z = (x * 10 + y * 10) / 10;

href="#"与href="javascript:void(0)"的区别
# 包含了一个位置信息，默认的锚是#top 也就是网页的上端。
而javascript:void(0), 仅仅表示一个死链接。

函数
函数通过关键字 function 定义
函数声明后不会立即执行，会在我们需要的时候调用到。
分号是用来分隔可执行JavaScript语句。
由于函数声明不是一个可执行语句，所以不以分号结束。
函数表达式可以存储在变量中：
var x = function (a, b) {return a * b};
var z = x(4, 3);
以上函数实际上是一个 匿名函数 (函数没有名称)。
函数存储在变量中，不需要函数名称，通常通过变量名来调用。

函数同样可以通过内置的 JavaScript 函数构造器（Function()）定义
var myFunction = new Function("a", "b", "return a * b");
var x = myFunction(4, 3);

函数表达式可以 "自调用"。
自调用表达式会自动调用。
如果表达式后面紧跟 () ，则会自动调用。
不能自调用声明的函数。
通过添加括号，来说明它是一个函数表达式：
(function () {
    var x = "Hello!!";      // 我将调用自己
})();

函数调用
1.作为方法调用
var myObject = {
    firstName:"John",
    lastName: "Doe",
    fullName: function () {
        return this.firstName + " " + this.lastName;
    }
}
myObject.fullName();

2.使用构造函数调用函数
function myFunction(arg1, arg2) {
    this.firstName = arg1;
    this.lastName  = arg2;
}
var x = new myFunction("John","Doe");
x.firstName;

3.作为函数方法调用函数
function myFunction(a, b) {
    return a * b;
}
myObject = myFunction.call(myObject, 10, 2);     // 返回 20

function myFunction(a, b) {
    return a * b;
}
myArray = [10, 2];
myObject = myFunction.apply(myObject, myArray);  // 返回 20

函数使用场合的不同，this 的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。

isNaN() 全局函数来判断一个值是否是NaN值, 数字返回false, 非数字返回true
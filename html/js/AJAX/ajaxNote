AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。

AJAX = 异步 JavaScript 和 XML。

通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。

function loadXMLDoc(){
	var xmlhttp;
	if (window.XMLHttpRequest){
		//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码
		xmlhttp=new XMLHttpRequest();
	}
	else{
		// IE6, IE5 浏览器执行代码
		xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
	}
	xmlhttp.onreadystatechange=function(){
		if (xmlhttp.readyState==4 && xmlhttp.status==200){
			document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
		}
	}
	xmlhttp.open("GET","/try/ajax/ajax_info.txt",true);
	xmlhttp.send();
}

XMLHttpRequest 对象用于和服务器交换数据。
open(method,url,async) //method：请求的类型；GET 或 POST; url：文件在服务器上的位置; async：true（异步）或 false（同步）
send(string)           //string：仅用于 POST 请求

GET请求
xmlhttp.open("GET","/try/ajax/demo_get2.php?fname=Henry&lname=Ford",true);
xmlhttp.send();

POST请求
xmlhttp.open("POST","/try/ajax/demo_post2.php",true);
xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
xmlhttp.send("fname=Henry&lname=Ford");

XMLHTTP 就是通过HTTP协议取得网站上的文件数据的，所以也要发送HTTP头给服务器。
但是 XMLHTTP 默认的情况下有些参数可能没有说明在HTTP头里，这是当我们需要修改或添加这些参数时就用到了 setRequestHeader 方法。
setRequestHeader(header,value)  //header: 规定头的名称; value: 规定头的值

CONTENT-TYPE:application/x-www-form-urlencoded含义是表示客户端提交给服务器文本内容的编码方式是URL编码，即除了标准字符外，每字节以双字节16进制前加个“%”表示

与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。
然而，在以下情况中，请使用 POST 请求：
无法使用缓存文件（更新服务器上的文件或数据库）
向服务器发送大量数据（POST 没有数据量限制）
发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠

// --------- 注释 ---------

// XMLHttpRequest 属性 ----------------------------

// readyState
// 0	Uninitialized	初始化状态。XMLHttpRequest 对象已创建或已被 abort() 方法重置。
// 1	Open	        open() 方法已调用，但是 send() 方法未调用。请求还没有被发送。
// 2	Sent	        Send() 方法已调用，HTTP 请求已发送到 Web 服务器。未接收到响应。
// 3	Receiving	    所有响应头部都已经接收到。响应体开始接收但未完成。
// 4	Loaded	        HTTP 响应已经完全接收。

// status状态
// 由服务器返回的 HTTP 状态代码
// 1xx:信息响应类，表示接收到请求并且继续处理。(所有拉去的货，工厂还没有加工完毕)
// 2xx:处理成功响应类，表示动作被成功接收、理解和接受。。(所有拉去的货工厂全部加工完毕)
// 3xx:重定向响应类，为了完成指定的动作，必须接受进一步处理 。(所有拉去的货，工厂设备不够，让其他工厂帮忙加工)
// 4xx:客户端错误，客户请求包含语法错误或者是不能正确执行 。(这十车货有质量问题，工厂不能正常加工)
// 5xx:服务端错误，服务器不能正确执行一个正确的请求。(工厂在加工到一半过程中断电，不能继续加工)
// 当 readyState 小于 3 的时候读取这一属性会导致一个异常。

// statusText
// 这个属性用名称而不是数字指定了请求的 HTTP 的状态代码。
// 也就是说，当状态为 200 的时候它是 "OK"，
// 当状态为 404 的时候它是 "Not Found"。
// 和 status 属性一样，当 readyState 小于 3 的时候读取这一属性会导致一个异常。

// responseText
// 目前为止为服务器接收到的响应体（不包括头部），或者如果还没有接收到数据的话，就是空字符串。
// readyState 小于 3，这个属性就是一个空字符串。
// readyState 为 3，这个属性返回目前已经接收的响应部分。
// readyState 为 4，这个属性保存了完整的响应体。

// responseXML
// 对请求的响应，解析为 XML 并作为 Document 对象返回。

// XMLHttpRequest 方法 ----------------------------

// abort()
// 取消当前响应，关闭连接并且结束任何未决的网络活动。
// 这个方法把 XMLHttpRequest 对象重置为 readyState 为 0 的状态，并且取消所有未决的网络活动。
// 例如，如果请求用了太长时间，而且响应不再必要的时候，可以调用这个方法。

// getAllResponseHeaders()
// 把 HTTP 响应头部作为未解析的字符串返回。
// 如果 readyState 小于 3，这个方法返回 null。否则，它返回服务器发送的所有 HTTP 响应的头部。
// 头部作为单个的字符串返回，一行一个头部。每行用换行符 "\r\n" 隔开。

// getResponseHeader()
// 返回指定的 HTTP 响应头部的值。其参数是要返回的 HTTP 响应头部的名称。
// 可以使用任何大小写来制定这个头部名字，和响应头部的比较是不区分大小写的。
// 该方法的返回值是指定的 HTTP 响应头部的值，如果没有接收到这个头部或者 readyState 小于 3 则为空字符串。
// 如果接收到多个有指定名称的头部，这个头部的值被连接起来并返回，使用逗号和空格分隔开各个头部的值。

// open()
// 初始化 HTTP 请求参数，例如 URL 和 HTTP 方法，但是并不发送请求。

// send()
// 发送 HTTP 请求，使用传递给 open() 方法的参数，以及传递给该方法的可选请求体。

// setRequestHeader()
// 向一个打开但未发送的请求设置或添加一个 HTTP 请求。